import docker
import paramiko

from agentquest.drivers.pentest.shell import RemoteShell
from agentquest.drivers.pentest.tools import wait_for_message
from agentquest.utils import Observation


class PentestDriver:
    def __init__(self, task, flag, target):
        self.task = task
        self.flag = flag
        self.target = target
        self.ssh_kali = None
        self.remotes = {}

    def start_containers(self):
        cli = docker.from_env()

        kali_container = cli.containers.get("kali_master")
        vuln_container = cli.containers.get(self.target)

        if kali_container.status != "running":
            kali_container.start()
        if vuln_container.status != "running":
            vuln_container.start()
        print("Containers are running.")

    def stop_containers(self):
        cli = docker.from_env()

        kali_container = cli.containers.get("kali_master")
        vuln_container = cli.containers.get(self.target)
        print("Stopping containers...")
        kali_container.stop()
        vuln_container.stop()

    def _connect_to_kali(self):
        ssh = paramiko.SSHClient()
        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        ssh.connect("192.168.100.5", username="root", password="root", port=22)

        return ssh

    def reset(self):
        self.start_containers()

        # Connect to Kali
        self.ssh_kali = self._connect_to_kali()
        shell = self.ssh_kali.invoke_shell()
        wait_for_message(shell)
        self.remotes["192.168.100.5"] = RemoteShell(shell)

        # Instantiate the starting environment status
        obs = Observation(output=self.task, done=False)
        return obs

    def step(self, action):
        tool = action.action_value
        done = False
        if tool.__class__.__name__ == "SSHConnect":
            ssh, out = tool.run(self.ssh_kali)
            self.remotes[tool.ssh_ipaddr] = RemoteShell(ssh)

        elif tool.__class__.__name__ == "ExecuteBash":
            if tool.machine_ipaddr in self.remotes:
                shell = self.remotes[tool.machine_ipaddr]
                out = tool.run(shell)
            else:
                out = "Before sending a remote command you need to set-up an SSH connection."

        elif tool.__class__.__name__ == "FinalAnswer":
            if self.flag in tool.flag:
                out = "You Won!"
                done = True
                self.stop_containers()
            else:
                out = "Wrong flag. Try again."

        # Return the observation
        obs = Observation(output=out, done=done)
        return obs
